{
  "episodes_extra": {},
  "episodes_url": "https://anitaku.pe/category/{id}",
  "get_episodes": "function getEpisodes(json, html) { json = JSON.parse(json); const jsonRegex = new RegExp(`<div class=\"anime_info_body_bg\">(.*?)</p> </div>`, 'gi'); const infoArea = jsonRegex.exec(html)[1]; const descRegex = new RegExp(`\"description\">(.*?)</div>`); json.description = descRegex.exec(infoArea)[1]; const statusRegex = new RegExp(`Status: </span>(.*?)>(.*?)</a>`); json.status = statusRegex.exec(infoArea)[2]; const idRegex = new RegExp(`<input type=\"hidden\" value=\"(.*?)\" id=\"movie_id\"`); let id = idRegex.exec(html)[1]; const endEpRegex = new RegExp(`ep_end = '(.*?)'`); let endEp = endEpRegex.exec(html)[1]; json.extra = { next: `https://ajax.gogocdn.net/ajax/load-list-episode?ep_start=0&ep_end=${endEp}&id=${id}` }; return json; } function next(json, html) { json = JSON.parse(json); delete json.extra; let data = []; const epRegex = new RegExp(`<li>(.*?)</li>`, 'gi'); let match; while ((match = epRegex.exec(html)) != null) { let ep = {}; const idRegex = new RegExp(`<a href=\" /(.*?)\"`); ep.id = idRegex.exec(match)[1]; const numRegex = new RegExp(`</span> (.*?)</div>`); ep.number = parseInt(numRegex.exec(match)[1]); ep.title = \"\"; ep.watch_time = 0; ep.duration = 0; ep.completed = false; data.push(ep); } json.episodes = data; return json; }",
  "get_videos": "function getEpisodeVideo(html) { let dataVideo = html.match(new RegExp('data-video=\"(.*?)\"'))[1]; return { next: dataVideo }; } function next(json, html) { json = JSON.parse(json); iv = html.match(new RegExp('wrapper container-(.*?)\"'))[1]; secretKey = html.match(new RegExp('body class=\"container-(.*?)\"'))[1]; decryptionKey = html.match(new RegExp('videocontent-(.*?)\"'))[1]; let dataValue = html.match(new RegExp('data-value=\"(.*?)\"'))[1]; const idRegex = new RegExp(`data-video=\"https://(.*?)id=(.*?)&`); const id = idRegex.exec(html)[2]; let host = \"https://\" + \"s3taku.com\"; return { next: \"BUILD\", decrypt: { string: dataValue, iv: iv, key: secretKey, }, encrypt: { string: id, iv: iv, key: secretKey }, decryptionKey: decryptionKey, build: `${host}/encrypt-ajax.php?id=$encrypt&$decrypt&alias=${id}` }; } function next2(json, html) { json = JSON.parse(json); let data = JSON.parse(html).data; return { next: \"CRYPTO\", decrypt: { string: data, iv: json.decrypt.iv, key: json.decryptionKey } } } function next3(json, html) { json = JSON.parse(json); let sourceList = JSON.parse(json.data); return sourceList.source[0].file; }",
  "id": "Gogoanime",
  "media_type": "anime",
  "search": "function search(html) { let data = []; const narrowRegex = new RegExp(`<ul class=\"items\">(.*?)<ul>`, 'gi'); html = narrowRegex.exec(html)[1]; const regex = new RegExp(`<li>(.*?)</li>`, 'gi'); let match; while ((match = regex.exec(html)) !== null) { let lib_item = {}; const idRegex = new RegExp(`/category/(.*?)\"`, 'gi'); lib_item.id = idRegex.exec(match)[1]; const titleRegex = new RegExp(`title=\"(.*?)\"`); lib_item.title = titleRegex.exec(match)[1]; const imgRegex = new RegExp(`src=\"(.*?)\"`, 'gi'); lib_item.img = imgRegex.exec(match)[1]; lib_item.plugin = 'Gogoanime'; lib_item.studio = ''; lib_item.status = ''; lib_item.description = ''; lib_item.episodes = []; data.push(lib_item); } return data; }",
  "search_extra": {},
  "search_url": "https://anitaku.pe/search.html?keyword={title}",
  "version": "0.0.1",
  "videos_extra": {},
  "videos_url": "https://anitaku.pe/{id}"
}